{"version":3,"sources":["pokemon/events.cljs"],"mappings":";;;;AAcA,AAAAA,AAAA;AAAAC,AACE;AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AAAAD,AAAAJ,AAAA,AAAmBM;AAAnB,AAAAF,AAAAJ,AAAA,AAA6BO;AAA7B,AAAAH,AAAAJ,AAAA,AAAsCQ;AAAtC,AACE,AAAMC,AAAoB,AAAA,AAAA,AAAA,AAAA,AAAgBJ,AACAC,AACZI,AACAC;AACxBC,AAAoB;AAAKC;AAAL,AACE,AAAAC,AAAa,AAACE,AAAKT,AAASM;AAA5B,AAAA,AAAAC,AAAAA,AAACC,AAAAA,AAAAA;;;AACvBE,AAAoB;AAAKC;AAAL,AACE,AAAA,AAAAC,AAAQ,AAAMD;AACZ,AAAO,AAACE,AAAS,AAAcF;;AAC/B,AAAOA;;;;AAC/BG,AAAoB;AAAKC;AAAL,AACE,AAAAC,AAA4B,AAAA,AAAID,AACAI,AACAC;AAFhCJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtB,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAArB,AAAAC,AAAAoB,AAAAA;AAAA,AAAAnB,AAAAmB,AAAA,AAAcC;AAAd,AAAApB,AAAAmB,AAAA,AAAmBE;AAAnB,AAGE,AAAIA;AACF,AAAAG,AAAa,AAACZ,AAAKT,AAASkB;AAA5B,AAAA,AAAAG,AAAAA,AAACb,AAAAA,AAAAA;;AACD,AAAAc,AAAa,AAACb,AAAKR,AAAWgB;AAA9B,AAAA,AAAAK,AAAAA,AAACd,AAAAA,AAAAA;;;;AAhBjC,AAiBM,AAAA,AAACe,AACS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACpB,AAEkBD,AAC7B,AAAOQ,AACP,AAAOI,AACP,AAAQT;;;AAzBlB,AAAA,AAAAhB,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;AA2BD,AAAA,AAAA,AAAA,AAAeiC;AAGf,AAAA,AAACC,AACC,AAAKC,AAAEA;AAAP,AAAA,AAAA,AACOF","names":["G__27468","G__27469","re-frame.core/reg-fx","p__27470","map__27471","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","query","variables","on-error","on-success","body","cljs.core/clj->js","js/JSON.stringify","on-unexpected-error","e","G__27473","re-frame.core/dispatch","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","on-reponse","response","cljs.core/not","js/Error","on-json","json","map__27474","data","errors","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","clojure.walk/keywordize-keys","G__27476","G__27477","js/fetch","pokemon.events/default-db","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","_"],"sourcesContent":["(ns pokemon.events\n  (:require\n    [clojure.walk :as walk]\n    [re-frame.core :as rf]))\n\n\n; Code used to fetch data from api\n; Usage:\n; (rf/reg-event-fx :get-something\n;                  (fn [_ _]\n;                    {:fetch {:query      some-query\n;                             :variables  {:name \"foo\"}\n;                             :on-success [:some-event]\n;                             :on-error   [:some-other-event]}}))\n(rf/reg-fx :fetch\n  (fn [{:keys [query variables on-error on-success]}]\n    (let [body                (-> {:query     query\n                                   :variables variables}\n                                  clj->js\n                                  js/JSON.stringify)\n          on-unexpected-error (fn [e]\n                                (rf/dispatch (conj on-error e)))\n          on-reponse          (fn [response]\n                                (if-not (.-ok response)\n                                  (throw (js/Error (.-statusText response)))\n                                  (.json response)))\n          on-json             (fn [json]\n                                (let [{:keys [data errors]} (-> json\n                                                                js->clj\n                                                                walk/keywordize-keys)]\n                                  (if errors\n                                    (rf/dispatch (conj on-error errors))\n                                    (rf/dispatch (conj on-success data)))))]\n      (-> (js/fetch \"https://graphql-pokemon.now.sh/\"\n                    (clj->js {:method  \"POST\"\n                              :headers {\"Content-Type\" \"application/json\"}\n                              :body    body}))\n          (.then on-reponse)\n          (.then on-json)\n          (.catch on-unexpected-error)))))\n\n(def ^:private default-db\n  {:app-name \"Xerpa\"})\n\n(rf/reg-event-fx :initialize\n  (fn [_ _]\n    {:db default-db}))"]}