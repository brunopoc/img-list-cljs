{"version":3,"sources":["pokemon/events.cljs"],"mappings":"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","names":["G__36132","G__36133","re-frame.core/reg-sub","db","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__36134","vec__36135","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","item","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","p__36139","vec__36140","cljs.core.update.cljs$core$IFn$_invoke$arity$3","old-list","p1__36138#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__36143","vec__36144","cljs.core.map.cljs$core$IFn$_invoke$arity$2","old-item","p__36147","vec__36148","cljs.core/not","p__36151","vec__36152","newvalue","G__36155","G__36156","re-frame.core/reg-fx","p__36157","map__36158","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","query","variables","on-error","on-success","body","cljs.core/clj->js","js/JSON.stringify","on-unexpected-error","e","G__36160","re-frame.core/dispatch","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","on-reponse","response","js/Error","on-json","json","map__36161","data","errors","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","clojure.walk/keywordize-keys","G__36163","G__36164","js/fetch","pokemon.events/default-db","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns pokemon.events\n  (:require\n   [clojure.walk :as walk]\n   [re-frame.core :as rf]\n   [reagent.core :as r]\n   ))\n\n\n; Code used to fetch data from api\n; Usage:\n; (rf/reg-event-fx :get-something\n;                  (fn [_ _]\n;                    {:fetch {:query      some-query\n;                             :variables  {:name \"foo\"}\n;                             :on-success [:some-event]\n;                             :on-error   [:some-other-event]}}))\n\n\n(rf/reg-sub\n :get-list-todo\n (fn [db] (:list-todo db)))\n\n\n(rf/reg-event-db\n :add-todo\n (fn [db [_ item]] (update db :list-todo conj item)))\n\n(rf/reg-event-db\n :remove-todo\n (fn [db [_ item]] (update db :list-todo (fn [old-list] (remove #(= item %) old-list)))))\n\n\n(rf/reg-event-db\n :show-input-todo-list\n (fn [db [_ item]] \n   (update db :list-todo \n           (fn [old-list]\n             (map (fn [old-item]\n                    (if (= (:id old-item) (:id item))\n                      {:id (:id old-item)\n                       :value (:value old-item)\n                       :input true\n                       :done (:done old-item)}\n                      old-item)) old-list)))))\n\n(rf/reg-event-db\n :todo-done\n (fn [db [_ item]] (update db :list-todo\n                          (fn [old-list]\n                            (map (fn [old-item]\n                                   (if (= (:id old-item) (:id item))\n                                     {:id (:id old-item)\n                                      :value (:value old-item)\n                                      :input (:input old-item)\n                                      :done (not (:done item))}\n                                     old-item)) old-list)))))\n\n(rf/reg-event-db\n :edit-item-list\n (fn [db [_ item newvalue]] (update db :list-todo\n                                    (fn [old-list]\n                                      (map (fn [old-item]\n                                             (if (= (:id old-item) (:id item))\n                                               {:id (:id old-item)\n                                                :value newvalue\n                                                :input false\n                                                :done (:done old-item)}\n                                               old-item)) old-list)))))\n\n(rf/reg-fx :fetch\n  (fn [{:keys [query variables on-error on-success]}]\n    (let [body                (-> {:query     query\n                                   :variables variables}\n                                  clj->js\n                                  js/JSON.stringify)\n          on-unexpected-error (fn [e]\n                                (rf/dispatch (conj on-error e)))\n          on-reponse          (fn [response]\n                                (if-not (.-ok response)\n                                  (throw (js/Error (.-statusText response)))\n                                  (.json response)))\n          on-json             (fn [json]\n                                (let [{:keys [data errors]} (-> json\n                                                                js->clj\n                                                                walk/keywordize-keys)]\n                                  (if errors\n                                    (rf/dispatch (conj on-error errors))\n                                    (rf/dispatch (conj on-success data)))))]\n      (-> (js/fetch \"https://graphql-pokemon.now.sh/\"\n                    (clj->js {:method  \"POST\"\n                              :headers {\"Content-Type\" \"application/json\"}\n                              :body    body}))\n          (.then on-reponse)\n          (.then on-json)\n          (.catch on-unexpected-error)))))\n\n(def ^:private default-db\n  {:app-name \"Xerpa\"})\n\n(rf/reg-event-fx :initialize\n  (fn [_ _]\n    {:db default-db}))"]}