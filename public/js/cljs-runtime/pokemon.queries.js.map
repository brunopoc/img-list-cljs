{"version":3,"sources":["pokemon/queries.cljs"],"mappings":";;AAEA,AAAA,AAAKA;AAgBL,AAAA,AAAKC","names":["pokemon.queries/pokemon","pokemon.queries/pokemons"],"sourcesContent":["(ns pokemon.queries)\n\n(def pokemon\n  \"\nquery($name: String!){\n  pokemon(name: $name){\n    id\n    name\n    number\n    image\n    types\n    evolutions{\n      name\n    }\n  }\n}\n\")\n\n(def pokemons\n  \"\nquery ($first: Int!){\n  pokemons(first: $first){\n    id\n    name\n    number\n  }\n}  \n  \")\n\n;efeito com request -- exemplo\n#_(fn [{:keys [query variables on-error on-success]}]\n  (rf/dispatch [:add-one-request])\n  (let [body                (-> {:query     query\n                                 :variables variables}\n                                clj->js\n                                js/JSON.stringify)\n        on-unexpected-error (fn [e]\n                              (rf/dispatch (conj on-error e)))\n        on-json             (fn [json]\n                              (let [{:keys [data errors]} (-> json\n                                                              js->clj\n                                                              walk/keywordize-keys)]\n                                (if errors\n                                  (rf/dispatch (conj on-error errors))\n                                  (rf/dispatch (conj on-success data)))))]\n    (-> (js/fetch \"https://graphql-pokemon.now.sh/\"\n                  (clj->js {:method  \"POST\"\n                            :headers {\"Content-Type\" \"application/json\"}\n                            :body    body}))\n        (.then on-reponse)\n        (.then on-json)\n        (.catch on-unexpected-error)\n        (.finally #(rf/dispatch [:drop-one-request])))))"]}